Mechanisms for storing and queueing code:
   1. Javascript thread saves source code reference in global,
      external thread queues the code back to Javascript
      thread.

      onTouch(), timer(), oneShot(), 

   2. Javascript thread pulls code from an object, saves the object
      ptr and code reference in a message and queues the message
      to another thread.

      When an interesting event occurs, the secondary thread queues
      the execution of code back to the Javascript thread.

   3. Same as 2.), but Javascript thread intercepts the queueing of 
      code and doesn't wait for primary code pulling loop.

      (Kinda like modal message pump in Windoze)

Problems:
   When object references are 'out there' on message queues or in
   secondary threads, they need to be 'rooted', and currently they
   aren't.

Opportunities:
   
   1. When handed off to a secondary thread, we're always executing in
      the primary Javascript thread, so we should probably root things
      at hand-off time. (I don't think we really have a choice)

   2. In order to root these, we can use:
      
      JS_AddRoot
      JS_AddNamedRoot   (do we always have a convenient name?)

      The difficulty I can see with these are that JS_AddRoot requires
      a fixed location in RAM, which is difficult to provide for things
      working their way through queues, and JSAddNamedRoot requires
      a name (duh!).

      Maybe we can accomplish address stability by placing the GC-Thing
      refs in dynamically allocated memory and simply pass ptrs through
      the message queues.
      
      A quick look at JS_AddRoot indicates that it performs a hash on
      the ptr handed to JS_AddRoot (ptr-to-ptr-to-GC-Thing), so it should
      be really efficient to add and remove roots on the fly.

      This seems like a good way to go.

Work to be done:
   Queues in use:
      audioQueue  - structure in queue has a direct ptr to a JSObject.
                    
                    --- This will have to change to have stable address
                    for JSObject

      ccWorker    - structure in queue has an opaque ptr to app data, which
                    in turn points to the ccActiveURL item_t, which in
                    turn points to structure with jsCurl request, which
                    has JSObjects lhObj_ and rhObj_, and a JSContext cx_.
                    
                    --- This can work, although we should get rid of the
                    rhObj_ and need to JS_AddRoot the lhObj_.
                    
      codeQueue   - scriptAndScope_t is passed through queue, and has
                    members JSObject *scope_ and jsval script_.
                    
                    --- This will have to change to have stable address
                    for JSObject as well as rooting.

   That's not so bad.

   There are 7 places that code (handlers) are stored and queued:
      x timer thread params
         - Modified to root when command executed, remove when shut down
      x global touch handlers ( bare onTouch(), onMove(), onRelease() )
         - Modified to root on startup. Never unrooted.
      x barcode handler
         - Modified to root on startup, unroot on shutdown of barcode thread.
      x queueCode() routine in jsExec - handler code is a parameter to the function.
         - Modified to root on way into queue, execute and unroot on way out
      x jsButton - onTouch, onMove, onRelease

         Because the button() class uses Javascript storage for it's internals,
         it should generally be GC-safe, with the exception of terminating conditions
         (i.e. button is pressed and handler queued immediately prior to destruction
         and Garbage Collection).

         To be safe, the button object should be rooted prior to handler call and
         unrooted after handler execution.

      x audioQueue_t when playback finished or cancelled
         Note that the audio queue actually has refs to either two or three 
         objects:
            the MP3 file itself (used for scoping the callbacks)
            the unnamed object used to define the onComplete and onCancel handlers
            the onComplete and onCancel code strings

            The items are now in a dynamically allocated and rooted in the insert() 
            call and a callback is used to execute the handlers, unroot the objects,
            and free the structure.

      jsCurl - onLoad, onLoadError, onCancel, onSize, onProgress
         as mentioned before, this routine/module/class currently has references 
         to two GC-objects, the left and right hand objects, but they can 
         be collapsed into a single object (done). 

         The code that depends on this also requires C++ post-processing before handlers 
         are invoked and allows synchronous calls (i.e. intercepted callbacks).

         An object of type jsCurlRequest_t is initialized and passed by reference through
         the Curl Cache queues to the completion handler. Its' constructor and destructor
         have been modified to add and remove roots for the object representing the 
         file.

   The curl completion handlers (called by ccActiveURL) also currently store
   member data (image,text,MP3 parsing).

